/**
 * 3.4.5 Number类型
 */

!function(){
    'use strict';

    var intNum = 55; // 整数

    /**
     * 八进制字面量在严格模式下是无效的，会导致支持的 JavaScript引擎抛出错误
     */

    //var octalNum1 = 070; // 八进制

    /**
     * 十六进制字面值的前两位必须是 0x，后跟任何十六进制数字（0～9 及 A～F）。其中，字母 A～F 可以大写，也可以小写
     */

    var hexNum1 = 0xA; // 十六进制的10
    var hexNum2 = 0x1F // 十六进制的31
}();


!function(){
    'use strict';

    /**
     * 1.浮点数值
     */

    var floatNum1 = 1.1;
    var floatNum2 = 0.1;
    var floatNum3 = .1; // 有效，但不推荐

}();

!function(){
    'use strict';

    var floatNum1 = 1.;        // 小数点后面没有数字——解析为 1
    var floatNum2 = 10.0;      // 整数——解析为 10
    var floatNum = 3.125e7;  // 等于 31250000

    /**
     * 在默认情况下，ECMASctipt 会将那些小数点后面带有 6 个零以上的浮点数值转换为以 e 表示法 表示的数值（例如，0.0000003会被转换成 3e7）。
     */

    /**
     * 浮点数值的高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。
     * 例如，0.1加 0.2 的结果不是 0.3，而是 0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。
     * 例如：
     *
     * if (a + b == 0.3){          // 不要做这样的测试！
     *  alert("You got 0.3.");
     * }
     */
}();


